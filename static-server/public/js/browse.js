const PAGE_SIZE = 10;
const PAGE_RENDER_LIMIT = 2;

const renderSongs = function (data) {
    $('#song-list-container').empty();
    
    if (!data || !data.length) {
        $('#song-no-result').show();
        return;
    }

    const rows = [];
    for (let i = 0; i < data.length; i += 2) {
        let songRow = [ data[i] ]

        if (i + 1 < data.length) {
            songRow.push(data[i + 1])
        }   

        rows.push(songRow)
    }

    let htmlContainerString = `<div>`
    for (let i = 0; i < rows.length; i++) {
        let [ firstSong, secondSong ] = rows[i]
        let htmlString = `
        <div class="row">
            <div class="col-6 my-2">
                <div class="card">
                    <img src="./example-cover.png" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title text-start"><b>${firstSong['author']}</b>: ${firstSong['title']}</h5>
                        <p class="card-text text-start" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${firstSong['description'] || ''}</p>
                        <a href="#" class="btn app-btn">Download</a>
                    </div>
                </div>
            </div>`

        if (secondSong) {
            htmlString += 
               `<div class="col-6 my-2">
                    <div class="card">
                        <img src="./example-cover.png" class="card-img-top" alt="...">
                        <div class="card-body">
                            <h5 class="card-title text-start"><b>${secondSong['author']}</b>: ${secondSong['title']}</h5>
                            <p class="card-text text-start" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${secondSong['description'] || ''}</p>
                            <a href="#" class="btn app-btn">Download</a>
                        </div>
                    </div>
                </div>`
        }

        htmlString += '</div>'
        htmlContainerString += htmlString;
    }
    htmlContainerString += `</div>`

    return $(htmlContainerString)
}

const renderPagination = function (paging, url) {
    //pull the current offset and total count of items from the 'paging' object returned by the API
    const { offset, totalCount } = paging;

    //create an element for the nav and ul tags
    let navContainer = $(`<nav aria-label="Page navigation example"></nav>`);
    let ulContainer = $(`<ul class="pagination justify-content-center"></ul>`);

    //calculate the current page based on the offset with this formula 
    //take the current offset divide it by 10 and add 1 since pages start at 1 while the offset starts at 0
    //Since pageSize is currently limited to 10 the offset will always be divisible by 10
    const currentPage = (offset / PAGE_SIZE) + 1;

    //The page list starts at 1 so disable the previous button if the current page is 1
    if (currentPage === 1) {
        $(ulContainer).append(`<li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>`);
    } else {

        //subtract 10 from the current offset to get the offset of the previos page
        const previousPageLink = url + `?offset=${offset - PAGE_SIZE}&pageSize=10`
        $(ulContainer).append(`<li class="page-item" style="cursor:pointer;"><a class="page-link available-link" url="${previousPageLink}">Previous</a></li>`);
    }
    
    //Set a limit for the amount of pages generated by the for loop
    //We only render two pages past the current page or less than that if the offset it close to the end of the list of songs
    //to raise the number of pages rendered in the future then change the PAGE_RENDER_LIMIT variable
    const limit = Math.min(currentPage + PAGE_RENDER_LIMIT, Math.ceil( totalCount / PAGE_SIZE ));

    //Start the loop either two pages before the current page or at 1 to ensure we do not render pages less than 1
    //Keep iterating until the limit is reached
    for (let i = Math.max((currentPage - PAGE_RENDER_LIMIT), 1); i <= limit; i++) {
        
        let pageElement; 
        if (i === currentPage) {
            pageElement = $(`<li class="page-item active"><a class="page-link" href="#">${i}</a></li>`);
        } else {

            //To get the offset of a page get the difference between the i, the page being rendered and the current page and add the offset
            let pageLink = url + `?offset=${(offset + ((i - currentPage) * PAGE_SIZE))}&pageSize=10`;
            pageElement = $(`<li class="page-item" style="cursor:pointer;"><a class="page-link available-link" url="${pageLink}">${i}</a></li>`);
        }

        $(ulContainer).append(pageElement);
    }

    //If the current page is equal to the limit disable the next button
    if (currentPage === limit) {
        $(ulContainer).append('<li class="page-item disabled"><a class="page-link" href="#">Next</a></li>');
    } else {
        const nextPageLink = url + `?offset=${offset + PAGE_SIZE}&pageSize=10`
        $(ulContainer).append(`<li class="page-item" style="cursor:pointer;"><a class="page-link available-link" url="${nextPageLink}">Next</a></li>`);
    }

    $(navContainer).append(ulContainer);
    return navContainer;
}

const renderSongContainer = function (songContainer, pagination) {
    $(songContainer).append($(pagination).html());
    $('#song-list-container').append($(songContainer).html());
}

const LoadSongs = function () {
    $('#song-no-result').hide();
    const searchTerm = $('#search-box-input').val();

    const apiUrl = searchTerm && searchTerm !== '' ? `http://localhost:8888/api/Song/Search/${searchTerm}` : 
        `http://localhost:8888/api/Song`

    $('#song-loading').show();

    $.ajax({
        url: apiUrl,
        beforeSend: () => $('#song-loading').show(),
        success: function (result) {
            $('#song-loading').hide();
            let songListContainer = renderSongs(result['data']);
            let paginationContainer = renderPagination(result['paging'], apiUrl);
            renderSongContainer(songListContainer, paginationContainer);
        },
        error: function (xhr, textStatus, errorThrown) {
            $('#song-loading').hide();
            alert('Server error has occured');
            console.log({ xhr, textStatus, errorThrown })
        }
    });
}

const getNewPage = function () {
    const url = new URL($(this).attr('url'));

    $.ajax({
        url: url['href'],
        beforeSend: () => $('#song-loading').show(),
        success: function (result) {
            $('#song-loading').hide();
            let songListContainer = renderSongs(result['data']);
            let paginationContainer = renderPagination(result['paging'], url.origin + url.pathname);
            renderSongContainer(songListContainer, paginationContainer);
        },
        error: function (xhr, textStatus, errorThrown) {
            $('#song-loading').hide();
            alert('Server error has occured');
            console.log({ xhr, textStatus, errorThrown })
        }
    });
}

$(document).ready(function () {
    LoadSongs();

    $('#search-form').submit(function (event) {
        event.preventDefault();
        LoadSongs();
    });

    $('#song-list-container').on('click', '.available-link', getNewPage)
});