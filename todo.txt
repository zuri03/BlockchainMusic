General Idea:
Blockchain spotify
    - store hashes of music files in a smart contract
    - ensure that users must tip artists before getting data for a song
    - have an offchain service for allowing an artist to create a new account 
        - with each new account a new contract is deployed to the network with all of the artists songs and funds

architecture:
    - multiple individual services (probably microservices pattern)
        - blockchain service
            - contains contracts 
        - authentication service:
            This service will only store metadata about users to allow for authentication
        - api gateway:
            only service the user's browser can call directly
            serves as a proxy/filter for the other services 
                needs to be highly secure and performant
            keeps track of session
        - music service:
            - rest api that manages metadata about songs
        - static file server:
            - serves HTML, CSS and JS files to the user
todo:
    set up HTTPS
    
    create README

    update node version to remove 'unsupported engine' warnings

    implement nodejs security practices:
        https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html
    
    s3 security practices
        https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html

    music-service:
        increase security of mongo instance (research)
        mock external db for tests (research)
        finish adding tests for all routes (depends on mock db)
        add a input handling/cleaning library 
        imporve security of docker container (research)
        use a cache to improve speed of requests (research)
        cache the totalCount so that an extra db query is not needed on every request
        properly configure CORS
        Look into creating custom client to interact with S3 rest api (research)
            - this would allow me to remove the @aws-sdk/client-s3 dependency

    static file server: 
        improve the look of each page and the site theme
        finish web pages:
            user page:
                create user signup form

            browse music page:
                set up donwload function for each song (depends on blochain service)
                add pagination functionality
            
            song page:
                improve the look of the song form
                add function to load data for a song
                add funciton to download song (depends on blochain service)
    
    user/authentication service:
        set up skeleton of user service
        determine shape of user objects
        determine which external db will store objects
        
    API Gateway:
        set up skeleton of gateway
        determine which authenticaiton and authorization mechanism to use (research)

    blockchain service:
        set up contract to hold songs by a single artists
        set up skeleton of offchain part of this service
        add tests to blockchain-service
        create dockerfile for offchain part of blockchain service