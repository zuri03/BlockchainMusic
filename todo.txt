General Idea:
Blockchain spotify
    - store hashes of music files in a smart contract
    - ensure that users must author artists before getting data for a song
    - have an offchain service for allowing an artist to create a new account 
        - with each new account a new contract is deployed to the network with all of the artists songs and funds

architecture:
    - multiple individual services (probably microservices pattern)
        - blockchain service
            - Two Parts 
                - On Contract services  
                    - series of smart contracts that store music data
                    - data is compressed and stored in a map
                    - contract must offer create, read, delete functionality
                - off contract services 
                    - epxose API for uploading new songs
                        -API must provide create and delete functionality
                    - maintain a database of metadata about the contracts deployed 
                        - key/value store: key = userid, value = smart contract address containing songs
        - authentication service:
            This service will only store metadata about users to allow for authentication
        - api gateway:
            only service the user's browser can call directly
            serves as a proxy/filter for the other services 
                needs to be highly secure and performant
            keeps track of session
        - song service:
            - rest api that manages metadata about songs
        - static file server:
            - serves HTML, CSS and JS files to the user

future plans:
    create cli for interacting with the system

todo:

    set up s3 bucket file upload integration tests

    set up production configuration for each service
    
    set up HTTPS
    
    create README

    update node version to remove 'unsupported engine' warnings

    implement nodejs security practices:
        https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html
    
    s3 security practices
        https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html

    song-service:
        increase security of mongo instance (research)
        mock external db for tests (research)
            create db interface 
            refactor current db to implement that interface
            create mockdb to also implement the interface
        finish adding tests for all routes (depends on mock db)
        add a input handling/cleaning library (express-validator)
        improve security of docker container (research)
        cache the totalCount so that an extra db query is not needed on every request
        properly configure CORS

    static file server: 
        improve the look of each page and the site theme
        finish web pages:
            user page:
                create user signup form

            browse music page:
                set up donwload function for each song (depends on blochain service)
                add pagination functionality
            
            song page:
                improve the look of the song form
                add function to load data for a song
                add funciton to download song (depends on blochain service)
    
    user/authentication service:
        https://auth0.com/docs/api/authentication?http#introduction

    API Gateway:
        express' session middleware is not meant for production (product configuration)
            - search for a compatible session store to pair with the middlware (research)
        look into session hijacking prevention techniques (research)
        https://evertpot.com/jwt-is-a-bad-default/

    blockchain service:
        securing data stored in smart contracts (research)
        hash userid for dynamodb
        improve security of smart contract https://docs.soliditylang.org/en/v0.8.21/security-considerations.html#clearing-mappings


         