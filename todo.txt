General Idea:
Blockchain spotify
    - store hashes of music files in a smart contract
    - ensure that users must author artists before getting data for a song
    - have an offchain service for allowing an artist to create a new account 
        - with each new account a new contract is deployed to the network with all of the artists songs and funds

architecture:
    - multiple individual services (probably microservices pattern)
        - blockchain service
            - Two Parts 
                - On Contract services  
                    - series of smart contracts that store music data
                    - data is compressed and stored in a map
                    - contract must offer create, read, delete functionality
                - off contract services 
                    - epxose API for uploading new songs
                        -API must provide create and delete functionality
                    - maintain a database of metadata about the contracts deployed 
                        - key/value store: key = userid, value = smart contract address containing songs
        - authentication service:
            This service will only store metadata about users to allow for authentication
        - api gateway:
            only service the user's browser can call directly
            serves as a proxy/filter for the other services 
                needs to be highly secure and performant
            keeps track of session
        - song service:
            - rest api that manages metadata about songs
        - static file server:
            - serves HTML, CSS and JS files to the user

future plans:
    create cli for interacting with the system

todo:
    automate unit tests

    set up s3 bucket file upload integration tests

    set up production configuration for each service
    
    set up HTTPS
    
    create README

    implement synchronized tokens
        - generate a token server-side on login
        - This token is returned to the user and stored in cookie
        - Every subsequent request must contain the token in a unique request header to perform privileged operations

    implement nodejs security practices:
        https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html
    
    s3 security practices
        https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html

    song-service:
        add a input handling/cleaning library (express-validator)
        
    static file server: 
        improve the look of each page and the site theme
        finish web pages:
            user page:
                create user signup form

            browse music page:
                set up donwload function for each song (depends on blochain service)
                add pagination functionality
            
            song page:
                improve the look of the song form
                add function to load data for a song
                add funciton to download song (depends on blochain service)
    
    user/authentication service:
        https://auth0.com/docs/api/authentication?http#introduction
        username is no longer going to be unique    
            - to authenicate we must search db based on username and try to find a match between the plaintext password and the hashed passwords returned from the db

    API Gateway:
        express' session middleware is not meant for production 
            - search for a compatible session store to pair with the middlware (research)
        look into session hijacking prevention techniques (research)
        add unit tests
        add support for CSRF tokens

    blockchain service:
        securing data stored in smart contracts (research)
        improve security of smart contract https://docs.soliditylang.org/en/v0.8.21/security-considerations.html#clearing-mappings


      blockchain-service:
    image: blockchain-service
    build:
      context: ./blockchain-service/.
      dockerfile: ./Dockerfile
    environment:
      - NODE_ENV=test
      - GATEWAY_API_KEY=${GATEWAY_API_KEY}
      - DB_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
    container_name: blockchain-container
    restart: unless-stopped